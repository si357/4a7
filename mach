import matplotlib.pyplot as plt
import numpy as np
# Sample data as a multi-line string
data = """177.750   0.00000  -0.00094   0.87871   0.93151   0.31998
180.000   0.00003   0.00113   0.37221   0.79896   0.57545
182.250   0.00076   0.00319  -0.22033   0.64389   0.81863
184.500   0.00220   0.00521  -0.67014   0.52618   1.00342
186.750   0.00437   0.00719  -0.94843   0.45335   1.12608
189.000   0.00726   0.00913  -1.10333   0.41281   1.19919
191.250   0.01088   0.01103  -1.19545   0.38870   1.24487
193.500   0.01524   0.01289  -1.24506   0.37572   1.27027
195.750   0.02033   0.01470  -1.27121   0.36888   1.28391
198.000   0.02615   0.01647  -1.27692   0.36738   1.28691
200.250   0.03270   0.01821  -1.27378   0.36821   1.28525
202.500   0.03996   0.01992  -1.26624   0.37018   1.28130
204.750   0.04792   0.02160  -1.25463   0.37322   1.27524
207.000   0.05657   0.02327  -1.22811   0.38016   1.26153
209.250   0.06588   0.02491  -1.20125   0.38719   1.24781
211.500   0.07583   0.02653  -1.18079   0.39254   1.23748
213.750   0.08640   0.02812  -1.16509   0.39665   1.22962
216.000   0.09757   0.02967  -1.15042   0.40049   1.22232
218.250   0.10932   0.03119  -1.13929   0.40340   1.21681
220.500   0.12162   0.03265  -1.12995   0.40584   1.21221
222.750   0.13445   0.03405  -1.12399   0.40740   1.20928
225.000   0.14780   0.03538  -1.11939   0.40861   1.20703
227.250   0.16165   0.03663  -1.11775   0.40904   1.20623
229.500   0.17598   0.03779  -1.11699   0.40924   1.20586
231.750   0.19077   0.03885  -1.11656   0.40935   1.20564
234.000   0.20601   0.03980  -1.11166   0.41063   1.20325
236.250   0.22170   0.04063  -1.09158   0.41589   1.19349
238.500   0.23781   0.04136  -1.03755   0.43002   1.16763
240.750   0.25434   0.04199  -0.79618   0.49319   1.05782
243.000   0.27126   0.04251  -0.60168   0.54409   0.97450
245.250   0.28856   0.04294  -0.58724   0.54787   0.96846
247.500   0.30622   0.04327  -0.55716   0.55574   0.95590
249.750   0.32421   0.04353  -0.53861   0.56060   0.94820
252.000   0.34251   0.04372  -0.51697   0.56626   0.93923
254.250   0.36110   0.04386  -0.49653   0.57161   0.93080
256.500   0.37994   0.04395  -0.47698   0.57673   0.92275
258.750   0.39899   0.04401  -0.46005   0.58116   0.91580
261.000   0.41822   0.04405  -0.44600   0.58483   0.91004
263.250   0.43759   0.04409  -0.43684   0.58723   0.90629
265.500   0.45705   0.04413  -0.43216   0.58846   0.90438
267.750   0.47654   0.04417  -0.43131   0.58868   0.90403
270.000   0.49602   0.04419  -0.43254   0.58836   0.90453
272.250   0.51546   0.04419  -0.43590   0.58748   0.90591
274.500   0.53482   0.04416  -0.44019   0.58635   0.90766
276.750   0.55407   0.04409  -0.44626   0.58477   0.91014
279.000   0.57318   0.04399  -0.45376   0.58280   0.91321
281.250   0.59209   0.04386  -0.46640   0.57949   0.91840
283.500   0.61077   0.04370  -0.48783   0.57389   0.92721
285.750   0.62913   0.04348  -0.51658   0.56636   0.93907
288.000   0.64715   0.04315  -0.54404   0.55918   0.95045
290.250   0.66482   0.04266  -0.56521   0.55364   0.95926
292.500   0.68214   0.04201  -0.57900   0.55003   0.96501
294.750   0.69909   0.04116  -0.58386   0.54876   0.96704
297.000   0.71567   0.04010  -0.57424   0.55127   0.96302
299.250   0.73188   0.03878  -0.54373   0.55926   0.95032
301.500   0.74776   0.03720  -0.49201   0.57279   0.92893
303.750   0.76337   0.03537  -0.42920   0.58923   0.90317
306.000   0.77872   0.03336  -0.36462   0.60613   0.87687
308.250   0.79381   0.03120  -0.30326   0.62219    0.85204
310.500   0.80860   0.02893  -0.24516   0.63740   0.82862
312.750   0.82309   0.02660  -0.19133   0.65148   0.80697
315.000   0.83725   0.02424  -0.14107   0.66464   0.78678
317.250   0.85104   0.02186  -0.09470   0.67677   0.76814
319.500   0.86445   0.01950  -0.05176   0.68801   0.75087
321.750   0.87744   0.01718  -0.01228   0.69834   0.73496
324.000   0.88999   0.01492   0.02410   0.70786   0.72026
326.250   0.90208   0.01274   0.05744   0.71658   0.70674
328.500   0.91368   0.01067   0.08731   0.72440   0.69460
330.750   0.92478   0.00875   0.11316   0.73117   0.68405
333.000   0.93532   0.00703   0.13466   0.73679   0.67525
335.250   0.94524   0.00552   0.15193   0.74131   0.66816
337.500   0.95449   0.00426   0.16545   0.74485   0.66260
339.750   0.96300   0.00323   0.17548   0.74747   0.65846
342.000   0.97071   0.00243   0.18206   0.74920   0.65574
344.250   0.97756   0.00184   0.18562   0.75013   0.65427
346.500   0.98348   0.00141   0.18738   0.75059   0.65354
348.750   0.98848   0.00107   0.18882   0.75097   0.65295
351.000   0.99258   0.00079   0.19065   0.75145   0.65219
353.250   0.99580   0.00057   0.19256   0.75195   0.65140
355.500   0.99811   0.00041   0.19389   0.75229   0.65085
357.750   0.99952   0.00030   0.19451   0.75246   0.65059
360.000   1.00000   0.00026   0.19505   0.75260   0.65037"""

# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73, alpha_design')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data as a multi-line string
data = """177.750   0.00000  -0.00094   0.84022   0.92632   0.33247
  180.000   0.00003   0.00113   0.30748   0.79201   0.58691
  182.250   0.00076   0.00319  -0.30340   0.63799   0.82770
  184.500   0.00220   0.00521  -0.77138   0.52000   1.01348
  186.750   0.00437   0.00719  -1.06131   0.44691   1.13742
  189.000   0.00726   0.00913  -1.21608   0.40789   1.20838
  191.250   0.01088   0.01103  -1.30427   0.38565   1.25079
  193.500   0.01524   0.01289  -1.34896   0.37438   1.27292
  195.750   0.02033   0.01470  -1.37023   0.36902   1.28361
  198.000   0.02615   0.01647  -1.37075   0.36889   1.28388
  200.250   0.03270   0.01821  -1.36194   0.37111   1.27943
  202.500   0.03996   0.01992  -1.34855   0.37449   1.27271
  204.750   0.04792   0.02160  -1.33064   0.37900   1.26379
  207.000   0.05657   0.02327  -1.29598   0.38774   1.24673
  209.250   0.06588   0.02491  -1.25992   0.39683   1.22926
  211.500   0.07583   0.02653  -1.22961   0.40448   1.21478
  213.750   0.08640   0.02812  -1.20247   0.41132   1.20197
  216.000   0.09757   0.02967  -1.17294   0.41876   1.18819
  218.250   0.10932   0.03119  -1.13488   0.42836   1.17065
  220.500   0.12162   0.03265  -1.06576   0.44579   1.13941
  222.750   0.13445   0.03405  -0.85473   0.49899   1.04814
  225.000   0.14780   0.03538  -0.71546   0.53410   0.99058
  227.250   0.16165   0.03663  -0.77863   0.51818   1.01646
  229.500   0.17598   0.03779  -0.83362   0.50431   1.03929
  231.750   0.19077   0.03885  -0.84860   0.50054   1.04556
  234.000   0.20601   0.03980  -0.82067   0.50758   1.03389
  236.250   0.22170   0.04063  -0.76938   0.52051   1.01265
  238.500   0.23781   0.04136  -0.72982   0.53048   0.99643
  240.750   0.25434   0.04199  -0.69783   0.53855   0.98341
  243.000   0.27126   0.04251  -0.66277   0.54739   0.96923
  245.250   0.28856   0.04294  -0.62977   0.55571   0.95596
  247.500   0.30622   0.04327  -0.59722   0.56391   0.94294
  249.750   0.32421   0.04353  -0.56678   0.57159   0.93083
  252.000   0.34251   0.04372  -0.53796   0.57885   0.91941
  254.250   0.36110   0.04386  -0.51162   0.58550   0.90900
  256.500   0.37994   0.04395  -0.48779   0.59150   0.89962
  258.750   0.39899   0.04401  -0.46762   0.59659   0.89170
  261.000   0.41822   0.04405  -0.45100   0.60078   0.88518
  263.250   0.43759   0.04409  -0.43965   0.60364   0.88074
  265.500   0.45705   0.04413  -0.43298   0.60532   0.87813
  267.750   0.47654   0.04417  -0.43029   0.60600   0.87708
  270.000   0.49602   0.04419  -0.42982   0.60612   0.87690
  272.250   0.51546   0.04419  -0.43160   0.60567   0.87759
  274.500   0.53482   0.04416  -0.43442   0.60496   0.87869
  276.750   0.55407   0.04409  -0.43909   0.60378   0.88052
  279.000   0.57318   0.04399  -0.44514   0.60226   0.88289
  281.250   0.59209   0.04386  -0.45603   0.59951   0.88715
  283.500   0.61077   0.04370  -0.47504   0.59472   0.89461
  285.750   0.62913   0.04348  -0.50065   0.58826   0.90468
  288.000   0.64715   0.04315  -0.52479   0.58217   0.91420
  290.250   0.66482   0.04266  -0.54328   0.57751   0.92151
  292.500   0.68214   0.04201  -0.55570   0.57438   0.92643
  294.750   0.69909   0.04116  -0.56108   0.57303   0.92857
  297.000   0.71567   0.04010  -0.55452   0.57468   0.92596
  299.250   0.73188   0.03878  -0.52947   0.58099   0.91605
  301.500   0.74776   0.03720  -0.48384   0.59250   0.89807
  303.750   0.76337   0.03537  -0.42618   0.60704   0.87547
  306.000   0.77872   0.03336  -0.36536   0.62237   0.85176
  308.250   0.79381   0.03120  -0.30656   0.63720   0.82893
  310.500   0.80860   0.02893  -0.25021   0.65140   0.80709
  312.750   0.82309   0.02660  -0.19752   0.66469   0.78670
  315.000   0.83725   0.02424  -0.14789   0.67720   0.76748
  317.250   0.85104   0.02186  -0.10173   0.68884   0.74959
  319.500   0.86445   0.01950  -0.05868   0.69969   0.73287
  321.750   0.87744   0.01718  -0.01886   0.70973   0.71737
  324.000   0.88999   0.01492   0.01808   0.71904   0.70293
  326.250   0.90208   0.01274   0.05216   0.72763   0.68956
  328.500   0.91368   0.01067   0.08285   0.73537   0.67747
  330.750   0.92478   0.00875   0.10954   0.74210   0.66692
  333.000   0.93532   0.00703   0.13177   0.74771   0.65809
  335.250   0.94524   0.00552   0.14963   0.75221   0.65098
  337.500   0.95449   0.00426   0.16352   0.75571   0.64543
  339.750   0.96300   0.00323   0.17371   0.75828   0.64135
  342.000   0.97071   0.00243   0.18025   0.75993   0.63873
  344.250   0.97756   0.00184   0.18364   0.76078   0.63737
  346.500   0.98348   0.00141   0.18519   0.76118   0.63675
  348.750   0.98848   0.00107   0.18650   0.76151   0.63622
  351.000   0.99258   0.00079   0.18831   0.76196   0.63549
  353.250   0.99580   0.00057   0.19024   0.76245   0.63472
  355.500   0.99811   0.00041   0.19156   0.76278   0.63419
  357.750   0.99952   0.00030   0.19215   0.76293   0.63395
  360.000   1.00000   0.00026   0.19264   0.76305   0.63375"""

# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.71, alpha_design')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string
data = """177.750   0.00000  -0.00094   0.85857   0.92862   0.32699
  180.000   0.00003   0.00113   0.33923   0.79518   0.58169
  182.250   0.00076   0.00319  -0.26000   0.64123   0.82273
  184.500   0.00220   0.00521  -0.72109   0.52276   1.00899
  186.750   0.00437   0.00719  -1.00794   0.44906   1.13363
  189.000   0.00726   0.00913  -1.16232   0.40939   1.20556
  191.250   0.01088   0.01103  -1.25178   0.38641   1.24932
  193.500   0.01524   0.01289  -1.29861   0.37438   1.27293
  195.750   0.02033   0.01470  -1.32233   0.36828   1.28510
  198.000   0.02615   0.01647  -1.32569   0.36742   1.28683
  200.250   0.03270   0.01821  -1.32006   0.36887   1.28393
  202.500   0.03996   0.01992  -1.30997   0.37146   1.27875
  204.750   0.04792   0.02160  -1.29567   0.37513   1.27144
  207.000   0.05657   0.02327  -1.26574   0.38282   1.25631
  209.250   0.06588   0.02491  -1.23516   0.39068   1.24106
  211.500   0.07583   0.02653  -1.21091   0.39691   1.22912
  213.750   0.08640   0.02812  -1.19116   0.40198   1.21949
  216.000   0.09757   0.02967  -1.17201   0.40690   1.21022
  218.250   0.10932   0.03119  -1.15593   0.41103   1.20250
  220.500   0.12162   0.03265  -1.14095   0.41488   1.19535
  222.750   0.13445   0.03405  -1.12824   0.41815   1.18932
  225.000   0.14780   0.03538  -1.11478   0.42161   1.18296
  227.250   0.16165   0.03663  -1.09866   0.42575   1.17539
  229.500   0.17598   0.03779  -1.06936   0.43328   1.16175
  231.750   0.19077   0.03885  -1.00971   0.44860   1.13443
  234.000   0.20601   0.03980  -0.80335   0.50162   1.04376
  236.250   0.22170   0.04063  -0.66344   0.53757   0.98498
  238.500   0.23781   0.04136  -0.67381   0.53491   0.98928
  240.750   0.25434   0.04199  -0.65747   0.53910   0.98252
  243.000   0.27126   0.04251  -0.63939   0.54375   0.97506
  245.250   0.28856   0.04294  -0.61485   0.55005   0.96497
  247.500   0.30622   0.04327  -0.58775   0.55702   0.95388
  249.750   0.32421   0.04353  -0.56056   0.56400   0.94281
  252.000   0.34251   0.04372  -0.53386   0.57086   0.93197
  254.250   0.36110   0.04386  -0.50898   0.57725   0.92192
  256.500   0.37994   0.04395  -0.48622   0.58310   0.91275
  258.750   0.39899   0.04401  -0.46688   0.58807   0.90498
  261.000   0.41822   0.04405  -0.45097   0.59216   0.89860
  263.250   0.43759   0.04409  -0.44028   0.59491   0.89432
  265.500   0.45705   0.04413  -0.43426   0.59645   0.89191
  267.750   0.47654   0.04417  -0.43221   0.59698   0.89109
  270.000   0.49602   0.04419  -0.43235   0.59694   0.89115
  272.250   0.51546   0.04419  -0.43471   0.59634   0.89209
  274.500   0.53482   0.04416  -0.43809   0.59547   0.89344
  276.750   0.55407   0.04409  -0.44331   0.59413   0.89553
  279.000   0.57318   0.04399  -0.44995   0.59242   0.89819
  281.250   0.59209   0.04386  -0.46158   0.58943   0.90285
  283.500   0.61077   0.04370  -0.48165   0.58428   0.91091
  285.750   0.62913   0.04348  -0.50864   0.57734   0.92178
  288.000   0.64715   0.04315  -0.53422   0.57077   0.93212
  290.250   0.66482   0.04266  -0.55385   0.56573   0.94008
  292.500   0.68214   0.04201  -0.56685   0.56239   0.94536
  294.750   0.69909   0.04116  -0.57202   0.56106   0.94747
  297.000   0.71567   0.04010  -0.56416   0.56308   0.94427
  299.250   0.73188   0.03878  -0.53672   0.57013   0.93313
  301.500   0.74776   0.03720  -0.48831   0.58257   0.91359
  303.750   0.76337   0.03537  -0.42820   0.59801   0.88949
  306.000   0.77872   0.03336  -0.36553   0.61411   0.86452
  308.250   0.79381   0.03120  -0.30548   0.62954   0.84071
  310.500   0.80860   0.02893  -0.24822   0.64425   0.81808
  312.750   0.82309   0.02660  -0.19489   0.65795   0.79704
  315.000   0.83725   0.02424  -0.14493   0.67079   0.77733
  317.250   0.85104   0.02186  -0.09865   0.68268   0.75906
  319.500   0.86445   0.01950  -0.05564   0.69373   0.74206
  321.750   0.87744   0.01718  -0.01596   0.70392   0.72634
  324.000   0.88999   0.01492   0.02074   0.71335   0.71175
  326.250   0.90208   0.01274   0.05448   0.72202   0.69830
  328.500   0.91368   0.01067   0.08479   0.72981   0.68617
  330.750   0.92478   0.00875   0.11109   0.73657   0.67560
  333.000   0.93532   0.00703   0.13296   0.74219   0.66679
  335.250   0.94524   0.00552   0.15053   0.74670   0.65968
  337.500   0.95449   0.00426   0.16424   0.75022   0.65412
  339.750   0.96300   0.00323   0.17437   0.75283   0.65000
  342.000   0.97071   0.00243   0.18098   0.75452   0.64731
  344.250   0.97756   0.00184   0.18451   0.75543   0.64588
  346.500   0.98348   0.00141   0.18621   0.75587   0.64518
  348.750   0.98848   0.00107   0.18761   0.75623   0.64461
  351.000   0.99258   0.00079   0.18945   0.75670   0.64386
  353.250   0.99580   0.00057   0.19137   0.75720   0.64308
  355.500   0.99811   0.00041   0.19269   0.75753   0.64254
  357.750   0.99952   0.00030   0.19327   0.75768   0.64230
  360.000   1.00000   0.00026   0.19376   0.75781   0.64211
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.72, alpha_design')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string
data = """ 177.750   0.00000  -0.00094   0.89663   0.93396   0.31395
  180.000   0.00003   0.00113   0.40742   0.80362   0.56771
  182.250   0.00076   0.00319  -0.16103   0.65216   0.80592
  184.500   0.00220   0.00521  -0.61291   0.53177   0.99435
  186.750   0.00437   0.00719  -0.89890   0.45557   1.12218
  189.000   0.00726   0.00913  -1.05126   0.41498   1.19517
  191.250   0.01088   0.01103  -1.14180   0.39085   1.24072
  193.500   0.01524   0.01289  -1.19188   0.37751   1.26673
  195.750   0.02033   0.01470  -1.21930   0.37021   1.28125
  198.000   0.02615   0.01647  -1.22669   0.36824   1.28519
  200.250   0.03270   0.01821  -1.22547   0.36856   1.28454
  202.500   0.03996   0.01992  -1.21999   0.37002   1.28162
  204.750   0.04792   0.02160  -1.21059   0.37253   1.27661
  207.000   0.05657   0.02327  -1.18682   0.37886   1.26408
  209.250   0.06588   0.02491  -1.16290   0.38523   1.25161
  211.500   0.07583   0.02653  -1.14533   0.38991   1.24254
  213.750   0.08640   0.02812  -1.13261   0.39330   1.23601
  216.000   0.09757   0.02967  -1.12104   0.39638   1.23012
  218.250   0.10932   0.03119  -1.11307   0.39851   1.22607
  220.500   0.12162   0.03265  -1.10697   0.40014   1.22298
  222.750   0.13445   0.03405  -1.10434   0.40083   1.22166
  225.000   0.14780   0.03538  -1.10339   0.40109   1.22118
  227.250   0.16165   0.03663  -1.10586   0.40043   1.22242
  229.500   0.17598   0.03779  -1.10994   0.39934   1.22449
  231.750   0.19077   0.03885  -1.11567   0.39782   1.22739
  234.000   0.20601   0.03980  -1.11986   0.39670   1.22951
  236.250   0.22170   0.04063  -1.12310   0.39584   1.23117
  238.500   0.23781   0.04136  -1.12318   0.39582   1.23121
  240.750   0.25434   0.04199  -1.11891   0.39695   1.22903
  243.000   0.27126   0.04251  -1.09485   0.40336   1.21688
  245.250   0.28856   0.04294  -1.02958   0.42075   1.18453
  247.500   0.30622   0.04327  -0.74830   0.49570   1.05363
  249.750   0.32421   0.04353  -0.52302   0.55572   0.95594
  252.000   0.34251   0.04372  -0.50104   0.56157   0.94665
  254.250   0.36110   0.04386  -0.46517   0.57113   0.93155
  256.500   0.37994   0.04395  -0.45036   0.57508   0.92534
  258.750   0.39899   0.04401  -0.43623   0.57884   0.91943
  261.000   0.41822   0.04405  -0.42666   0.58139   0.91543
  263.250   0.43759   0.04409  -0.42109   0.58288   0.91310
  265.500   0.45705   0.04413  -0.41958   0.58328   0.91247
  267.750   0.47654   0.04417  -0.42145   0.58278   0.91325
  270.000   0.49602   0.04419  -0.42509   0.58181   0.91477
  272.250   0.51546   0.04419  -0.43056   0.58035   0.91706
  274.500   0.53482   0.04416  -0.43673   0.57871   0.91963
  276.750   0.55407   0.04409  -0.44449   0.57664   0.92288
  279.000   0.57318   0.04399  -0.45356   0.57422   0.92668
  281.250   0.59209   0.04386  -0.46784   0.57042   0.93267
  283.500   0.61077   0.04370  -0.49120   0.56419   0.94250
  285.750   0.62913   0.04348  -0.52239   0.55589   0.95568
  288.000   0.64715   0.04315  -0.55258   0.54784   0.96850
  290.250   0.66482   0.04266  -0.57617   0.54156   0.97857
  292.500   0.68214   0.04201  -0.59143   0.53749   0.98511
  294.750   0.69909   0.04116  -0.59614   0.53624   0.98714
  297.000   0.71567   0.04010  -0.58430   0.53939   0.98205
  299.250   0.73188   0.03878  -0.55011   0.54850   0.96745
  301.500   0.74776   0.03720  -0.49469   0.56327   0.94397
  303.750   0.76337   0.03537  -0.42909   0.58074   0.91644
  306.000   0.77872   0.03336  -0.36260   0.59846   0.88879
  308.250   0.79381   0.03120  -0.30002   0.61513   0.86294
  310.500   0.80860   0.02893  -0.24115   0.63082   0.83874
  312.750   0.82309   0.02660  -0.18685   0.64528   0.81649
  315.000   0.83725   0.02424  -0.13639   0.65873   0.79585
  317.250   0.85104   0.02186  -0.08997   0.67110   0.77686
  319.500   0.86445   0.01950  -0.04712   0.68251   0.75932
  321.750   0.87744   0.01718  -0.00784   0.69298   0.74322
  324.000   0.88999   0.01492   0.02827   0.70260   0.72838
  326.250   0.90208   0.01274   0.06127   0.71139   0.71479
  328.500   0.91368   0.01067   0.09078   0.71925   0.70260
  330.750   0.92478   0.00875   0.11628   0.72605   0.69203
  333.000   0.93532   0.00703   0.13744   0.73169   0.68324
  335.250   0.94524   0.00552   0.15441   0.73621   0.67617
  337.500   0.95449   0.00426   0.16766   0.73974   0.67063
  339.750   0.96300   0.00323   0.17749   0.74236   0.66652
  342.000   0.97071   0.00243   0.18398   0.74409   0.66380
  344.250   0.97756   0.00184   0.18757   0.74504   0.66229
  346.500   0.98348   0.00141   0.18942   0.74554   0.66152
  348.750   0.98848   0.00107   0.19098   0.74595   0.66086
  351.000   0.99258   0.00079   0.19292   0.74647   0.66005
  353.250   0.99580   0.00057   0.19487   0.74699   0.65923
  355.500   0.99811   0.00041   0.19611   0.74732   0.65871
  357.750   0.99952   0.00030   0.19652   0.74743   0.65854
  360.000   1.00000   0.00026   0.19682   0.74751   0.65841
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.74, alpha_design')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.89663   0.93396   0.31395
  180.000   0.00003   0.00113   0.40742   0.80362   0.56771
  182.250   0.00076   0.00319  -0.16103   0.65216   0.80592
  184.500   0.00220   0.00521  -0.61291   0.53177   0.99435
  186.750   0.00437   0.00719  -0.89890   0.45557   1.12218
  189.000   0.00726   0.00913  -1.05126   0.41498   1.19517
  191.250   0.01088   0.01103  -1.14180   0.39085   1.24072
  193.500   0.01524   0.01289  -1.19188   0.37751   1.26673
  195.750   0.02033   0.01470  -1.21930   0.37021   1.28125
  198.000   0.02615   0.01647  -1.22669   0.36824   1.28519
  200.250   0.03270   0.01821  -1.22547   0.36856   1.28454
  202.500   0.03996   0.01992  -1.21999   0.37002   1.28162
  204.750   0.04792   0.02160  -1.21059   0.37253   1.27661
  207.000   0.05657   0.02327  -1.18682   0.37886   1.26408
  209.250   0.06588   0.02491  -1.16290   0.38523   1.25161
  211.500   0.07583   0.02653  -1.14533   0.38991   1.24254
  213.750   0.08640   0.02812  -1.13261   0.39330   1.23601
  216.000   0.09757   0.02967  -1.12104   0.39638   1.23012
  218.250   0.10932   0.03119  -1.11307   0.39851   1.22607
  220.500   0.12162   0.03265  -1.10697   0.40014   1.22298
  222.750   0.13445   0.03405  -1.10434   0.40083   1.22166
  225.000   0.14780   0.03538  -1.10339   0.40109   1.22118
  227.250   0.16165   0.03663  -1.10586   0.40043   1.22242
  229.500   0.17598   0.03779  -1.10994   0.39934   1.22449
  231.750   0.19077   0.03885  -1.11567   0.39782   1.22739
  234.000   0.20601   0.03980  -1.11986   0.39670   1.22951
  236.250   0.22170   0.04063  -1.12310   0.39584   1.23117
  238.500   0.23781   0.04136  -1.12318   0.39582   1.23121
  240.750   0.25434   0.04199  -1.11891   0.39695   1.22903
  243.000   0.27126   0.04251  -1.09485   0.40336   1.21688
  245.250   0.28856   0.04294  -1.02958   0.42075   1.18453
  247.500   0.30622   0.04327  -0.74830   0.49570   1.05363
  249.750   0.32421   0.04353  -0.52302   0.55572   0.95594
  252.000   0.34251   0.04372  -0.50104   0.56157   0.94665
  254.250   0.36110   0.04386  -0.46517   0.57113   0.93155
  256.500   0.37994   0.04395  -0.45036   0.57508   0.92534
  258.750   0.39899   0.04401  -0.43623   0.57884   0.91943
  261.000   0.41822   0.04405  -0.42666   0.58139   0.91543
  263.250   0.43759   0.04409  -0.42109   0.58288   0.91310
  265.500   0.45705   0.04413  -0.41958   0.58328   0.91247
  267.750   0.47654   0.04417  -0.42145   0.58278   0.91325
  270.000   0.49602   0.04419  -0.42509   0.58181   0.91477
  272.250   0.51546   0.04419  -0.43056   0.58035   0.91706
  274.500   0.53482   0.04416  -0.43673   0.57871   0.91963
  276.750   0.55407   0.04409  -0.44449   0.57664   0.92288
  279.000   0.57318   0.04399  -0.45356   0.57422   0.92668
  281.250   0.59209   0.04386  -0.46784   0.57042   0.93267
  283.500   0.61077   0.04370  -0.49120   0.56419   0.94250
  285.750   0.62913   0.04348  -0.52239   0.55589   0.95568
  288.000   0.64715   0.04315  -0.55258   0.54784   0.96850
  290.250   0.66482   0.04266  -0.57617   0.54156   0.97857
  292.500   0.68214   0.04201  -0.59143   0.53749   0.98511
  294.750   0.69909   0.04116  -0.59614   0.53624   0.98714
  297.000   0.71567   0.04010  -0.58430   0.53939   0.98205
  299.250   0.73188   0.03878  -0.55011   0.54850   0.96745
  301.500   0.74776   0.03720  -0.49469   0.56327   0.94397
  303.750   0.76337   0.03537  -0.42909   0.58074   0.91644
  306.000   0.77872   0.03336  -0.36260   0.59846   0.88879
  308.250   0.79381   0.03120  -0.30002   0.61513   0.86294
  310.500   0.80860   0.02893  -0.24115   0.63082   0.83874
  312.750   0.82309   0.02660  -0.18685   0.64528   0.81649
  315.000   0.83725   0.02424  -0.13639   0.65873   0.79585
  317.250   0.85104   0.02186  -0.08997   0.67110   0.77686
  319.500   0.86445   0.01950  -0.04712   0.68251   0.75932
  321.750   0.87744   0.01718  -0.00784   0.69298   0.74322
  324.000   0.88999   0.01492   0.02827   0.70260   0.72838
  326.250   0.90208   0.01274   0.06127   0.71139   0.71479
  328.500   0.91368   0.01067   0.09078   0.71925   0.70260
  330.750   0.92478   0.00875   0.11628   0.72605   0.69203
  333.000   0.93532   0.00703   0.13744   0.73169   0.68324
  335.250   0.94524   0.00552   0.15441   0.73621   0.67617
  337.500   0.95449   0.00426   0.16766   0.73974   0.67063
  339.750   0.96300   0.00323   0.17749   0.74236   0.66652
  342.000   0.97071   0.00243   0.18398   0.74409   0.66380
  344.250   0.97756   0.00184   0.18757   0.74504   0.66229
  346.500   0.98348   0.00141   0.18942   0.74554   0.66152
  348.750   0.98848   0.00107   0.19098   0.74595   0.66086
  351.000   0.99258   0.00079   0.19292   0.74647   0.66005
  353.250   0.99580   0.00057   0.19487   0.74699   0.65923
  355.500   0.99811   0.00041   0.19611   0.74732   0.65871
  357.750   0.99952   0.00030   0.19652   0.74743   0.65854
  360.000   1.00000   0.00026   0.19682   0.74751   0.65841
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.75, alpha_design')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.93525   0.94631   0.28190
  180.000   0.00003   0.00113   0.47098   0.82481   0.53185
  182.250   0.00076   0.00319  -0.08963   0.67810   0.76611
  184.500   0.00220   0.00521  -0.53771   0.56083   0.94782
  186.750   0.00437   0.00719  -0.82542   0.48554   1.07070
  189.000   0.00726   0.00913  -0.98882   0.44278   1.14474
  191.250   0.01088   0.01103  -1.08824   0.41676   1.19188
  193.500   0.01524   0.01289  -1.14028   0.40314   1.21730
  195.750   0.02033   0.01470  -1.16686   0.39619   1.23050
  198.000   0.02615   0.01647  -1.17300   0.39458   1.23357
  200.250   0.03270   0.01821  -1.16977   0.39542   1.23196
  202.500   0.03996   0.01992  -1.16183   0.39750   1.22799
  204.750   0.04792   0.02160  -1.14873   0.40093   1.22148
  207.000   0.05657   0.02327  -1.11867   0.40880   1.20667
  209.250   0.06588   0.02491  -1.08763   0.41692   1.19158
  211.500   0.07583   0.02653  -1.06278   0.42342   1.17964
  213.750   0.08640   0.02812  -1.04162   0.42896   1.16956
  216.000   0.09757   0.02967  -1.02039   0.43452   1.15952
  218.250   0.10932   0.03119  -1.00099   0.43959   1.15042
  220.500   0.12162   0.03265  -0.98046   0.44497   1.14086
  222.750   0.13445   0.03405  -0.95894   0.45060   1.13091
  225.000   0.14780   0.03538  -0.93440   0.45702   1.11965
  227.250   0.16165   0.03663  -0.91078   0.46320   1.10890
  229.500   0.17598   0.03779  -0.88948   0.46878   1.09927
  231.750   0.19077   0.03885  -0.87026   0.47381   1.09064
  234.000   0.20601   0.03980  -0.84332   0.48086   1.07863
  236.250   0.22170   0.04063  -0.79556   0.49335   1.05755
  238.500   0.23781   0.04136  -0.72228   0.51253   1.02573
  240.750   0.25434   0.04199  -0.67347   0.52531   1.00484
  243.000   0.27126   0.04251  -0.64704   0.53222   0.99362
  245.250   0.28856   0.04294  -0.61385   0.54091   0.97962
  247.500   0.30622   0.04327  -0.58269   0.54906   0.96655
  249.750   0.32421   0.04353  -0.55277   0.55689   0.95408
  252.000   0.34251   0.04372  -0.52454   0.56428   0.94236
  254.250   0.36110   0.04386  -0.49874   0.57103   0.93171
  256.500   0.37994   0.04395  -0.47552   0.57711   0.92215
  258.750   0.39899   0.04401  -0.45603   0.58221   0.91415
  261.000   0.41822   0.04405  -0.44020   0.58635   0.90766
  263.250   0.43759   0.04409  -0.42981   0.58907   0.90342
  265.500   0.45705   0.04413  -0.42427   0.59052   0.90115
  267.750   0.47654   0.04417  -0.42282   0.59090   0.90056
  270.000   0.49602   0.04419  -0.42366   0.59068   0.90090
  272.250   0.51546   0.04419  -0.42678   0.58986   0.90218
  274.500   0.53482   0.04416  -0.43096   0.58877   0.90389
  276.750   0.55407   0.04409  -0.43703   0.58718   0.90637
  279.000   0.57318   0.04399  -0.44460   0.58520   0.90947
  281.250   0.59209   0.04386  -0.45741   0.58185   0.91471
  283.500   0.61077   0.04370  -0.47909   0.57617   0.92361
  285.750   0.62913   0.04348  -0.50823   0.56855   0.93562
  288.000   0.64715   0.04315  -0.53626   0.56121   0.94722
  290.250   0.66482   0.04266  -0.55824   0.55546   0.95635
  292.500   0.68214   0.04201  -0.57315   0.55156   0.96257
  294.750   0.69909   0.04116  -0.57939   0.54993   0.96517
  297.000   0.71567   0.04010  -0.57129   0.55205   0.96179
  299.250   0.73188   0.03878  -0.54213   0.55968   0.94965
  301.500   0.74776   0.03720  -0.49132   0.57297   0.92865
  303.750   0.76337   0.03537  -0.42911   0.58925   0.90313
  306.000   0.77872   0.03336  -0.36493   0.60605   0.87700
  308.250   0.79381   0.03120  -0.30390   0.62202   0.85230
  310.500   0.80860   0.02893  -0.24604   0.63716   0.82897
  312.750   0.82309   0.02660  -0.19237   0.65121   0.80739
  315.000   0.83725   0.02424  -0.14218   0.66434   0.78723
  317.250   0.85104   0.02186  -0.09576   0.67649   0.76857
  319.500   0.86445   0.01950  -0.05266   0.68777   0.75124
  321.750   0.87744   0.01718  -0.01296   0.69816   0.73523
  324.000   0.88999   0.01492   0.02376   0.70777   0.72040
  326.250   0.90208   0.01274   0.05753   0.71661   0.70671
  328.500   0.91368   0.01067   0.08790   0.72455   0.69436
  330.750   0.92478   0.00875   0.11427   0.73146   0.68360
  333.000   0.93532   0.00703   0.13623   0.73720   0.67461
  335.250   0.94524   0.00552   0.15385   0.74182   0.66737
  337.500   0.95449   0.00426   0.16759   0.74541   0.66171
  339.750   0.96300   0.00323   0.17769   0.74805   0.65755
  342.000   0.97071   0.00243   0.18422   0.74976   0.65485
  344.250   0.97756   0.00184   0.18761   0.75065   0.65345
  346.500   0.98348   0.00141   0.18917   0.75106   0.65280
  348.750   0.98848   0.00107   0.19045   0.75139   0.65227
  351.000   0.99258   0.00079   0.19221   0.75185   0.65154
  353.250   0.99580   0.00057   0.19409   0.75235   0.65077
  355.500   0.99811   0.00041   0.19538   0.75268   0.65023
  357.750   0.99952   0.00030   0.19594   0.75283   0.65000
  360.000   1.00000   0.00026   0.19641   0.75295   0.64981
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73 alpha=2')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.91860   0.94195   0.29354
  180.000   0.00003   0.00113   0.44265   0.81739   0.54453
  182.250   0.00076   0.00319  -0.12476   0.66890   0.78023
  184.500   0.00220   0.00521  -0.57672   0.55062   0.96406
  186.750   0.00437   0.00719  -0.86475   0.47525   1.08818
  189.000   0.00726   0.00913  -1.02423   0.43351   1.16133
  191.250   0.01088   0.01103  -1.12067   0.40827   1.20766
  193.500   0.01524   0.01289  -1.17189   0.39487   1.23301
  195.750   0.02033   0.01470  -1.19825   0.38797   1.24629
  198.000   0.02615   0.01647  -1.20458   0.38631   1.24950
  200.250   0.03270   0.01821  -1.20198   0.38699   1.24818
  202.500   0.03996   0.01992  -1.19462   0.38892   1.24445
  204.750   0.04792   0.02160  -1.18222   0.39217   1.23820
  207.000   0.05657   0.02327  -1.15353   0.39967   1.22386
  209.250   0.06588   0.02491  -1.12423   0.40734   1.20940
  211.500   0.07583   0.02653  -1.10133   0.41333   1.19822
  213.750   0.08640   0.02812  -1.08269   0.41821   1.18920
  216.000   0.09757   0.02967  -1.06465   0.42293   1.18053
  218.250   0.10932   0.03119  -1.04953   0.42689   1.17332
  220.500   0.12162   0.03265  -1.03525   0.43063   1.16654
  222.750   0.13445   0.03405  -1.02291   0.43386   1.16071
  225.000   0.14780   0.03538  -1.00994   0.43725   1.15461
  227.250   0.16165   0.03663  -0.99714   0.44060   1.14863
  229.500   0.17598   0.03779  -0.98193   0.44458   1.14154
  231.750   0.19077   0.03885  -0.96157   0.44991   1.13212
  234.000   0.20601   0.03980  -0.92487   0.45951   1.11530
  236.250   0.22170   0.04063  -0.83153   0.48394   1.07340
  238.500   0.23781   0.04136  -0.70168   0.51792   1.01688
  240.750   0.25434   0.04199  -0.65089   0.53121   0.99525
  243.000   0.27126   0.04251  -0.64014   0.53403   0.99070
  245.250   0.28856   0.04294  -0.60945   0.54206   0.97776
  247.500   0.30622   0.04327  -0.58195   0.54926   0.96624
  249.750   0.32421   0.04353  -0.55362   0.55667   0.95443
  252.000   0.34251   0.04372  -0.52649   0.56377   0.94317
  254.250   0.36110   0.04386  -0.50134   0.57035   0.93278
  256.500   0.37994   0.04395  -0.47852   0.57632   0.92338
  258.750   0.39899   0.04401  -0.45928   0.58136   0.91548
  261.000   0.41822   0.04405  -0.44360   0.58546   0.90906
  263.250   0.43759   0.04409  -0.43330   0.58816   0.90484
  265.500   0.45705   0.04413  -0.42779   0.58960   0.90259
  267.750   0.47654   0.04417  -0.42635   0.58998   0.90200
  270.000   0.49602   0.04419  -0.42716   0.58976   0.90234
  272.250   0.51546   0.04419  -0.43024   0.58896   0.90359
  274.500   0.53482   0.04416  -0.43436   0.58788   0.90528
  276.750   0.55407   0.04409  -0.44035   0.58631   0.90772
  279.000   0.57318   0.04399  -0.44783   0.58435   0.91079
  281.250   0.59209   0.04386  -0.46054   0.58103   0.91600
  283.500   0.61077   0.04370  -0.48212   0.57538   0.92486
  285.750   0.62913   0.04348  -0.51113   0.56779   0.93682
  288.000   0.64715   0.04315  -0.53898   0.56050   0.94835
  290.250   0.66482   0.04266  -0.56072   0.55481   0.95739
  292.500   0.68214   0.04201  -0.57530   0.55100   0.96346
  294.750   0.69909   0.04116  -0.58112   0.54947   0.96590
  297.000   0.71567   0.04010  -0.57254   0.55172   0.96231
  299.250   0.73188   0.03878  -0.54292   0.55947   0.94999
  301.500   0.74776   0.03720  -0.49180   0.57285   0.92884
  303.750   0.76337   0.03537  -0.42935   0.58919   0.90323
  306.000   0.77872   0.03336  -0.36504   0.60602   0.87705
  308.250   0.79381   0.03120  -0.30391   0.62202   0.85230
  310.500   0.80860   0.02893  -0.24597   0.63718   0.82894
  312.750   0.82309   0.02660  -0.19222   0.65125   0.80733
  315.000   0.83725   0.02424  -0.14200   0.66439   0.78715
  317.250   0.85104   0.02186  -0.09560   0.67653   0.76851
  319.500   0.86445   0.01950  -0.05254   0.68780   0.75119
  321.750   0.87744   0.01718  -0.01289   0.69818   0.73521
  324.000   0.88999   0.01492   0.02373   0.70776   0.72041
  326.250   0.90208   0.01274   0.05738   0.71657   0.70677
  328.500   0.91368   0.01067   0.08762   0.72448   0.69447
  330.750   0.92478   0.00875   0.11386   0.73135   0.68377
  333.000   0.93532   0.00703   0.13569   0.73706   0.67483
  335.250   0.94524   0.00552   0.15321   0.74165   0.66763
  337.500   0.95449   0.00426   0.16686   0.74522   0.66201
  339.750   0.96300   0.00323   0.17693   0.74786   0.65786
  342.000   0.97071   0.00243   0.18348   0.74957   0.65515
  344.250   0.97756   0.00184   0.18697   0.75048   0.65371
  346.500   0.98348   0.00141   0.18867   0.75093   0.65301
  348.750   0.98848   0.00107   0.19012   0.75131   0.65241
  351.000   0.99258   0.00079   0.19201   0.75180   0.65162
  353.250   0.99580   0.00057   0.19398   0.75232   0.65081
  355.500   0.99811   0.00041   0.19530   0.75266   0.65027
  357.750   0.99952   0.00030   0.19582   0.75280   0.65005
  360.000   1.00000   0.00026   0.19625   0.75291   0.64987
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73, alpha=2.1')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.91860   0.94195   0.29354
  180.000   0.00003   0.00113   0.44265   0.81739   0.54453
  182.250   0.00076   0.00319  -0.12476   0.66890   0.78023
  184.500   0.00220   0.00521  -0.57672   0.55062   0.96406
  186.750   0.00437   0.00719  -0.86475   0.47525   1.08818
  189.000   0.00726   0.00913  -1.02423   0.43351   1.16133
  191.250   0.01088   0.01103  -1.12067   0.40827   1.20766
  193.500   0.01524   0.01289  -1.17189   0.39487   1.23301
  195.750   0.02033   0.01470  -1.19825   0.38797   1.24629
  198.000   0.02615   0.01647  -1.20458   0.38631   1.24950
  200.250   0.03270   0.01821  -1.20198   0.38699   1.24818
  202.500   0.03996   0.01992  -1.19462   0.38892   1.24445
  204.750   0.04792   0.02160  -1.18222   0.39217   1.23820
  207.000   0.05657   0.02327  -1.15353   0.39967   1.22386
  209.250   0.06588   0.02491  -1.12423   0.40734   1.20940
  211.500   0.07583   0.02653  -1.10133   0.41333   1.19822
  213.750   0.08640   0.02812  -1.08269   0.41821   1.18920
  216.000   0.09757   0.02967  -1.06465   0.42293   1.18053
  218.250   0.10932   0.03119  -1.04953   0.42689   1.17332
  220.500   0.12162   0.03265  -1.03525   0.43063   1.16654
  222.750   0.13445   0.03405  -1.02291   0.43386   1.16071
  225.000   0.14780   0.03538  -1.00994   0.43725   1.15461
  227.250   0.16165   0.03663  -0.99714   0.44060   1.14863
  229.500   0.17598   0.03779  -0.98193   0.44458   1.14154
  231.750   0.19077   0.03885  -0.96157   0.44991   1.13212
  234.000   0.20601   0.03980  -0.92487   0.45951   1.11530
  236.250   0.22170   0.04063  -0.83153   0.48394   1.07340
  238.500   0.23781   0.04136  -0.70168   0.51792   1.01688
  240.750   0.25434   0.04199  -0.65089   0.53121   0.99525
  243.000   0.27126   0.04251  -0.64014   0.53403   0.99070
  245.250   0.28856   0.04294  -0.60945   0.54206   0.97776
  247.500   0.30622   0.04327  -0.58195   0.54926   0.96624
  249.750   0.32421   0.04353  -0.55362   0.55667   0.95443
  252.000   0.34251   0.04372  -0.52649   0.56377   0.94317
  254.250   0.36110   0.04386  -0.50134   0.57035   0.93278
  256.500   0.37994   0.04395  -0.47852   0.57632   0.92338
  258.750   0.39899   0.04401  -0.45928   0.58136   0.91548
  261.000   0.41822   0.04405  -0.44360   0.58546   0.90906
  263.250   0.43759   0.04409  -0.43330   0.58816   0.90484
  265.500   0.45705   0.04413  -0.42779   0.58960   0.90259
  267.750   0.47654   0.04417  -0.42635   0.58998   0.90200
  270.000   0.49602   0.04419  -0.42716   0.58976   0.90234
  272.250   0.51546   0.04419  -0.43024   0.58896   0.90359
  274.500   0.53482   0.04416  -0.43436   0.58788   0.90528
  276.750   0.55407   0.04409  -0.44035   0.58631   0.90772
  279.000   0.57318   0.04399  -0.44783   0.58435   0.91079
  281.250   0.59209   0.04386  -0.46054   0.58103   0.91600
  283.500   0.61077   0.04370  -0.48212   0.57538   0.92486
  285.750   0.62913   0.04348  -0.51113   0.56779   0.93682
  288.000   0.64715   0.04315  -0.53898   0.56050   0.94835
  290.250   0.66482   0.04266  -0.56072   0.55481   0.95739
  292.500   0.68214   0.04201  -0.57530   0.55100   0.96346
  294.750   0.69909   0.04116  -0.58112   0.54947   0.96590
  297.000   0.71567   0.04010  -0.57254   0.55172   0.96231
  299.250   0.73188   0.03878  -0.54292   0.55947   0.94999
  301.500   0.74776   0.03720  -0.49180   0.57285   0.92884
  303.750   0.76337   0.03537  -0.42935   0.58919   0.90323
  306.000   0.77872   0.03336  -0.36504   0.60602   0.87705
  308.250   0.79381   0.03120  -0.30391   0.62202   0.85230
  310.500   0.80860   0.02893  -0.24597   0.63718   0.82894
  312.750   0.82309   0.02660  -0.19222   0.65125   0.80733
  315.000   0.83725   0.02424  -0.14200   0.66439   0.78715
  317.250   0.85104   0.02186  -0.09560   0.67653   0.76851
  319.500   0.86445   0.01950  -0.05254   0.68780   0.75119
  321.750   0.87744   0.01718  -0.01289   0.69818   0.73521
  324.000   0.88999   0.01492   0.02373   0.70776   0.72041
  326.250   0.90208   0.01274   0.05738   0.71657   0.70677
  328.500   0.91368   0.01067   0.08762   0.72448   0.69447
  330.750   0.92478   0.00875   0.11386   0.73135   0.68377
  333.000   0.93532   0.00703   0.13569   0.73706   0.67483
  335.250   0.94524   0.00552   0.15321   0.74165   0.66763
  337.500   0.95449   0.00426   0.16686   0.74522   0.66201
  339.750   0.96300   0.00323   0.17693   0.74786   0.65786
  342.000   0.97071   0.00243   0.18348   0.74957   0.65515
  344.250   0.97756   0.00184   0.18697   0.75048   0.65371
  346.500   0.98348   0.00141   0.18867   0.75093   0.65301
  348.750   0.98848   0.00107   0.19012   0.75131   0.65241
  351.000   0.99258   0.00079   0.19201   0.75180   0.65162
  353.250   0.99580   0.00057   0.19398   0.75232   0.65081
  355.500   0.99811   0.00041   0.19530   0.75266   0.65027
  357.750   0.99952   0.00030   0.19582   0.75280   0.65005
  360.000   1.00000   0.00026   0.19625   0.75291   0.64987
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73, alpha=2.2')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.91860   0.94195   0.29354
  180.000   0.00003   0.00113   0.44265   0.81739   0.54453
  182.250   0.00076   0.00319  -0.12476   0.66890   0.78023
  184.500   0.00220   0.00521  -0.57672   0.55062   0.96406
  186.750   0.00437   0.00719  -0.86475   0.47525   1.08818
  189.000   0.00726   0.00913  -1.02423   0.43351   1.16133
  191.250   0.01088   0.01103  -1.12067   0.40827   1.20766
  193.500   0.01524   0.01289  -1.17189   0.39487   1.23301
  195.750   0.02033   0.01470  -1.19825   0.38797   1.24629
  198.000   0.02615   0.01647  -1.20458   0.38631   1.24950
  200.250   0.03270   0.01821  -1.20198   0.38699   1.24818
  202.500   0.03996   0.01992  -1.19462   0.38892   1.24445
  204.750   0.04792   0.02160  -1.18222   0.39217   1.23820
  207.000   0.05657   0.02327  -1.15353   0.39967   1.22386
  209.250   0.06588   0.02491  -1.12423   0.40734   1.20940
  211.500   0.07583   0.02653  -1.10133   0.41333   1.19822
  213.750   0.08640   0.02812  -1.08269   0.41821   1.18920
  216.000   0.09757   0.02967  -1.06465   0.42293   1.18053
  218.250   0.10932   0.03119  -1.04953   0.42689   1.17332
  220.500   0.12162   0.03265  -1.03525   0.43063   1.16654
  222.750   0.13445   0.03405  -1.02291   0.43386   1.16071
  225.000   0.14780   0.03538  -1.00994   0.43725   1.15461
  227.250   0.16165   0.03663  -0.99714   0.44060   1.14863
  229.500   0.17598   0.03779  -0.98193   0.44458   1.14154
  231.750   0.19077   0.03885  -0.96157   0.44991   1.13212
  234.000   0.20601   0.03980  -0.92487   0.45951   1.11530
  236.250   0.22170   0.04063  -0.83153   0.48394   1.07340
  238.500   0.23781   0.04136  -0.70168   0.51792   1.01688
  240.750   0.25434   0.04199  -0.65089   0.53121   0.99525
  243.000   0.27126   0.04251  -0.64014   0.53403   0.99070
  245.250   0.28856   0.04294  -0.60945   0.54206   0.97776
  247.500   0.30622   0.04327  -0.58195   0.54926   0.96624
  249.750   0.32421   0.04353  -0.55362   0.55667   0.95443
  252.000   0.34251   0.04372  -0.52649   0.56377   0.94317
  254.250   0.36110   0.04386  -0.50134   0.57035   0.93278
  256.500   0.37994   0.04395  -0.47852   0.57632   0.92338
  258.750   0.39899   0.04401  -0.45928   0.58136   0.91548
  261.000   0.41822   0.04405  -0.44360   0.58546   0.90906
  263.250   0.43759   0.04409  -0.43330   0.58816   0.90484
  265.500   0.45705   0.04413  -0.42779   0.58960   0.90259
  267.750   0.47654   0.04417  -0.42635   0.58998   0.90200
  270.000   0.49602   0.04419  -0.42716   0.58976   0.90234
  272.250   0.51546   0.04419  -0.43024   0.58896   0.90359
  274.500   0.53482   0.04416  -0.43436   0.58788   0.90528
  276.750   0.55407   0.04409  -0.44035   0.58631   0.90772
  279.000   0.57318   0.04399  -0.44783   0.58435   0.91079
  281.250   0.59209   0.04386  -0.46054   0.58103   0.91600
  283.500   0.61077   0.04370  -0.48212   0.57538   0.92486
  285.750   0.62913   0.04348  -0.51113   0.56779   0.93682
  288.000   0.64715   0.04315  -0.53898   0.56050   0.94835
  290.250   0.66482   0.04266  -0.56072   0.55481   0.95739
  292.500   0.68214   0.04201  -0.57530   0.55100   0.96346
  294.750   0.69909   0.04116  -0.58112   0.54947   0.96590
  297.000   0.71567   0.04010  -0.57254   0.55172   0.96231
  299.250   0.73188   0.03878  -0.54292   0.55947   0.94999
  301.500   0.74776   0.03720  -0.49180   0.57285   0.92884
  303.750   0.76337   0.03537  -0.42935   0.58919   0.90323
  306.000   0.77872   0.03336  -0.36504   0.60602   0.87705
  308.250   0.79381   0.03120  -0.30391   0.62202   0.85230
  310.500   0.80860   0.02893  -0.24597   0.63718   0.82894
  312.750   0.82309   0.02660  -0.19222   0.65125   0.80733
  315.000   0.83725   0.02424  -0.14200   0.66439   0.78715
  317.250   0.85104   0.02186  -0.09560   0.67653   0.76851
  319.500   0.86445   0.01950  -0.05254   0.68780   0.75119
  321.750   0.87744   0.01718  -0.01289   0.69818   0.73521
  324.000   0.88999   0.01492   0.02373   0.70776   0.72041
  326.250   0.90208   0.01274   0.05738   0.71657   0.70677
  328.500   0.91368   0.01067   0.08762   0.72448   0.69447
  330.750   0.92478   0.00875   0.11386   0.73135   0.68377
  333.000   0.93532   0.00703   0.13569   0.73706   0.67483
  335.250   0.94524   0.00552   0.15321   0.74165   0.66763
  337.500   0.95449   0.00426   0.16686   0.74522   0.66201
  339.750   0.96300   0.00323   0.17693   0.74786   0.65786
  342.000   0.97071   0.00243   0.18348   0.74957   0.65515
  344.250   0.97756   0.00184   0.18697   0.75048   0.65371
  346.500   0.98348   0.00141   0.18867   0.75093   0.65301
  348.750   0.98848   0.00107   0.19012   0.75131   0.65241
  351.000   0.99258   0.00079   0.19201   0.75180   0.65162
  353.250   0.99580   0.00057   0.19398   0.75232   0.65081
  355.500   0.99811   0.00041   0.19530   0.75266   0.65027
  357.750   0.99952   0.00030   0.19582   0.75280   0.65005
  360.000   1.00000   0.00026   0.19625   0.75291   0.64987
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73, alpha=2.3')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.91860   0.94195   0.29354
  180.000   0.00003   0.00113   0.44265   0.81739   0.54453
  182.250   0.00076   0.00319  -0.12476   0.66890   0.78023
  184.500   0.00220   0.00521  -0.57672   0.55062   0.96406
  186.750   0.00437   0.00719  -0.86475   0.47525   1.08818
  189.000   0.00726   0.00913  -1.02423   0.43351   1.16133
  191.250   0.01088   0.01103  -1.12067   0.40827   1.20766
  193.500   0.01524   0.01289  -1.17189   0.39487   1.23301
  195.750   0.02033   0.01470  -1.19825   0.38797   1.24629
  198.000   0.02615   0.01647  -1.20458   0.38631   1.24950
  200.250   0.03270   0.01821  -1.20198   0.38699   1.24818
  202.500   0.03996   0.01992  -1.19462   0.38892   1.24445
  204.750   0.04792   0.02160  -1.18222   0.39217   1.23820
  207.000   0.05657   0.02327  -1.15353   0.39967   1.22386
  209.250   0.06588   0.02491  -1.12423   0.40734   1.20940
  211.500   0.07583   0.02653  -1.10133   0.41333   1.19822
  213.750   0.08640   0.02812  -1.08269   0.41821   1.18920
  216.000   0.09757   0.02967  -1.06465   0.42293   1.18053
  218.250   0.10932   0.03119  -1.04953   0.42689   1.17332
  220.500   0.12162   0.03265  -1.03525   0.43063   1.16654
  222.750   0.13445   0.03405  -1.02291   0.43386   1.16071
  225.000   0.14780   0.03538  -1.00994   0.43725   1.15461
  227.250   0.16165   0.03663  -0.99714   0.44060   1.14863
  229.500   0.17598   0.03779  -0.98193   0.44458   1.14154
  231.750   0.19077   0.03885  -0.96157   0.44991   1.13212
  234.000   0.20601   0.03980  -0.92487   0.45951   1.11530
  236.250   0.22170   0.04063  -0.83153   0.48394   1.07340
  238.500   0.23781   0.04136  -0.70168   0.51792   1.01688
  240.750   0.25434   0.04199  -0.65089   0.53121   0.99525
  243.000   0.27126   0.04251  -0.64014   0.53403   0.99070
  245.250   0.28856   0.04294  -0.60945   0.54206   0.97776
  247.500   0.30622   0.04327  -0.58195   0.54926   0.96624
  249.750   0.32421   0.04353  -0.55362   0.55667   0.95443
  252.000   0.34251   0.04372  -0.52649   0.56377   0.94317
  254.250   0.36110   0.04386  -0.50134   0.57035   0.93278
  256.500   0.37994   0.04395  -0.47852   0.57632   0.92338
  258.750   0.39899   0.04401  -0.45928   0.58136   0.91548
  261.000   0.41822   0.04405  -0.44360   0.58546   0.90906
  263.250   0.43759   0.04409  -0.43330   0.58816   0.90484
  265.500   0.45705   0.04413  -0.42779   0.58960   0.90259
  267.750   0.47654   0.04417  -0.42635   0.58998   0.90200
  270.000   0.49602   0.04419  -0.42716   0.58976   0.90234
  272.250   0.51546   0.04419  -0.43024   0.58896   0.90359
  274.500   0.53482   0.04416  -0.43436   0.58788   0.90528
  276.750   0.55407   0.04409  -0.44035   0.58631   0.90772
  279.000   0.57318   0.04399  -0.44783   0.58435   0.91079
  281.250   0.59209   0.04386  -0.46054   0.58103   0.91600
  283.500   0.61077   0.04370  -0.48212   0.57538   0.92486
  285.750   0.62913   0.04348  -0.51113   0.56779   0.93682
  288.000   0.64715   0.04315  -0.53898   0.56050   0.94835
  290.250   0.66482   0.04266  -0.56072   0.55481   0.95739
  292.500   0.68214   0.04201  -0.57530   0.55100   0.96346
  294.750   0.69909   0.04116  -0.58112   0.54947   0.96590
  297.000   0.71567   0.04010  -0.57254   0.55172   0.96231
  299.250   0.73188   0.03878  -0.54292   0.55947   0.94999
  301.500   0.74776   0.03720  -0.49180   0.57285   0.92884
  303.750   0.76337   0.03537  -0.42935   0.58919   0.90323
  306.000   0.77872   0.03336  -0.36504   0.60602   0.87705
  308.250   0.79381   0.03120  -0.30391   0.62202   0.85230
  310.500   0.80860   0.02893  -0.24597   0.63718   0.82894
  312.750   0.82309   0.02660  -0.19222   0.65125   0.80733
  315.000   0.83725   0.02424  -0.14200   0.66439   0.78715
  317.250   0.85104   0.02186  -0.09560   0.67653   0.76851
  319.500   0.86445   0.01950  -0.05254   0.68780   0.75119
  321.750   0.87744   0.01718  -0.01289   0.69818   0.73521
  324.000   0.88999   0.01492   0.02373   0.70776   0.72041
  326.250   0.90208   0.01274   0.05738   0.71657   0.70677
  328.500   0.91368   0.01067   0.08762   0.72448   0.69447
  330.750   0.92478   0.00875   0.11386   0.73135   0.68377
  333.000   0.93532   0.00703   0.13569   0.73706   0.67483
  335.250   0.94524   0.00552   0.15321   0.74165   0.66763
  337.500   0.95449   0.00426   0.16686   0.74522   0.66201
  339.750   0.96300   0.00323   0.17693   0.74786   0.65786
  342.000   0.97071   0.00243   0.18348   0.74957   0.65515
  344.250   0.97756   0.00184   0.18697   0.75048   0.65371
  346.500   0.98348   0.00141   0.18867   0.75093   0.65301
  348.750   0.98848   0.00107   0.19012   0.75131   0.65241
  351.000   0.99258   0.00079   0.19201   0.75180   0.65162
  353.250   0.99580   0.00057   0.19398   0.75232   0.65081
  355.500   0.99811   0.00041   0.19530   0.75266   0.65027
  357.750   0.99952   0.00030   0.19582   0.75280   0.65005
  360.000   1.00000   0.00026   0.19625   0.75291   0.64987
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73, alpha=2.4')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data as a multi-line string

data = """ 177.750   0.00000  -0.00094   0.91860   0.94195   0.29354
  180.000   0.00003   0.00113   0.44265   0.81739   0.54453
  182.250   0.00076   0.00319  -0.12476   0.66890   0.78023
  184.500   0.00220   0.00521  -0.57672   0.55062   0.96406
  186.750   0.00437   0.00719  -0.86475   0.47525   1.08818
  189.000   0.00726   0.00913  -1.02423   0.43351   1.16133
  191.250   0.01088   0.01103  -1.12067   0.40827   1.20766
  193.500   0.01524   0.01289  -1.17189   0.39487   1.23301
  195.750   0.02033   0.01470  -1.19825   0.38797   1.24629
  198.000   0.02615   0.01647  -1.20458   0.38631   1.24950
  200.250   0.03270   0.01821  -1.20198   0.38699   1.24818
  202.500   0.03996   0.01992  -1.19462   0.38892   1.24445
  204.750   0.04792   0.02160  -1.18222   0.39217   1.23820
  207.000   0.05657   0.02327  -1.15353   0.39967   1.22386
  209.250   0.06588   0.02491  -1.12423   0.40734   1.20940
  211.500   0.07583   0.02653  -1.10133   0.41333   1.19822
  213.750   0.08640   0.02812  -1.08269   0.41821   1.18920
  216.000   0.09757   0.02967  -1.06465   0.42293   1.18053
  218.250   0.10932   0.03119  -1.04953   0.42689   1.17332
  220.500   0.12162   0.03265  -1.03525   0.43063   1.16654
  222.750   0.13445   0.03405  -1.02291   0.43386   1.16071
  225.000   0.14780   0.03538  -1.00994   0.43725   1.15461
  227.250   0.16165   0.03663  -0.99714   0.44060   1.14863
  229.500   0.17598   0.03779  -0.98193   0.44458   1.14154
  231.750   0.19077   0.03885  -0.96157   0.44991   1.13212
  234.000   0.20601   0.03980  -0.92487   0.45951   1.11530
  236.250   0.22170   0.04063  -0.83153   0.48394   1.07340
  238.500   0.23781   0.04136  -0.70168   0.51792   1.01688
  240.750   0.25434   0.04199  -0.65089   0.53121   0.99525
  243.000   0.27126   0.04251  -0.64014   0.53403   0.99070
  245.250   0.28856   0.04294  -0.60945   0.54206   0.97776
  247.500   0.30622   0.04327  -0.58195   0.54926   0.96624
  249.750   0.32421   0.04353  -0.55362   0.55667   0.95443
  252.000   0.34251   0.04372  -0.52649   0.56377   0.94317
  254.250   0.36110   0.04386  -0.50134   0.57035   0.93278
  256.500   0.37994   0.04395  -0.47852   0.57632   0.92338
  258.750   0.39899   0.04401  -0.45928   0.58136   0.91548
  261.000   0.41822   0.04405  -0.44360   0.58546   0.90906
  263.250   0.43759   0.04409  -0.43330   0.58816   0.90484
  265.500   0.45705   0.04413  -0.42779   0.58960   0.90259
  267.750   0.47654   0.04417  -0.42635   0.58998   0.90200
  270.000   0.49602   0.04419  -0.42716   0.58976   0.90234
  272.250   0.51546   0.04419  -0.43024   0.58896   0.90359
  274.500   0.53482   0.04416  -0.43436   0.58788   0.90528
  276.750   0.55407   0.04409  -0.44035   0.58631   0.90772
  279.000   0.57318   0.04399  -0.44783   0.58435   0.91079
  281.250   0.59209   0.04386  -0.46054   0.58103   0.91600
  283.500   0.61077   0.04370  -0.48212   0.57538   0.92486
  285.750   0.62913   0.04348  -0.51113   0.56779   0.93682
  288.000   0.64715   0.04315  -0.53898   0.56050   0.94835
  290.250   0.66482   0.04266  -0.56072   0.55481   0.95739
  292.500   0.68214   0.04201  -0.57530   0.55100   0.96346
  294.750   0.69909   0.04116  -0.58112   0.54947   0.96590
  297.000   0.71567   0.04010  -0.57254   0.55172   0.96231
  299.250   0.73188   0.03878  -0.54292   0.55947   0.94999
  301.500   0.74776   0.03720  -0.49180   0.57285   0.92884
  303.750   0.76337   0.03537  -0.42935   0.58919   0.90323
  306.000   0.77872   0.03336  -0.36504   0.60602   0.87705
  308.250   0.79381   0.03120  -0.30391   0.62202   0.85230
  310.500   0.80860   0.02893  -0.24597   0.63718   0.82894
  312.750   0.82309   0.02660  -0.19222   0.65125   0.80733
  315.000   0.83725   0.02424  -0.14200   0.66439   0.78715
  317.250   0.85104   0.02186  -0.09560   0.67653   0.76851
  319.500   0.86445   0.01950  -0.05254   0.68780   0.75119
  321.750   0.87744   0.01718  -0.01289   0.69818   0.73521
  324.000   0.88999   0.01492   0.02373   0.70776   0.72041
  326.250   0.90208   0.01274   0.05738   0.71657   0.70677
  328.500   0.91368   0.01067   0.08762   0.72448   0.69447
  330.750   0.92478   0.00875   0.11386   0.73135   0.68377
  333.000   0.93532   0.00703   0.13569   0.73706   0.67483
  335.250   0.94524   0.00552   0.15321   0.74165   0.66763
  337.500   0.95449   0.00426   0.16686   0.74522   0.66201
  339.750   0.96300   0.00323   0.17693   0.74786   0.65786
  342.000   0.97071   0.00243   0.18348   0.74957   0.65515
  344.250   0.97756   0.00184   0.18697   0.75048   0.65371
  346.500   0.98348   0.00141   0.18867   0.75093   0.65301
  348.750   0.98848   0.00107   0.19012   0.75131   0.65241
  351.000   0.99258   0.00079   0.19201   0.75180   0.65162
  353.250   0.99580   0.00057   0.19398   0.75232   0.65081
  355.500   0.99811   0.00041   0.19530   0.75266   0.65027
  357.750   0.99952   0.00030   0.19582   0.75280   0.65005
  360.000   1.00000   0.00026   0.19625   0.75291   0.64987
"""



# Split the data into lines
lines = data.strip().split('\n')

# Initialize lists for the x and y values
x_values = []
y_values = []

# Loop through each line
for line in lines:
    # Split the line into elements
    elements = line.split()
    # Extract the 2nd and 5th elements (index 1 and 4)
    if len(elements) >= 5:  # Ensure there are enough elements
        x_values.append(float(elements[1]))  # 2nd element
        y_values.append(float(elements[5]))  # 6th element

# Plotting the graph for the data points
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, marker='x', linestyle='-', label='Mach Number on Airfoil Upper Surface')

# Buffet Boundary line
x_line = [0, 1]
y_line = [1.5, 1.2]
plt.plot(x_line, y_line, color='orange', linestyle='--', label='Buffet Boundary')

# Mild Buffet Boundary line
xm_line = [0, 1]
ym_line = [1.45, 1.15]
plt.plot(xm_line, ym_line, color='green', linestyle='dotted', label='Mild Buffet')

# Severe Buffet Boundary line
xs_line = [0, 1]
ys_line = [1.55, 1.25]
plt.plot(xs_line, ys_line, color='red', linestyle='dotted', label='Severe Buffet')


# Adding labels and title
plt.title('Plot of M vs x at M_flight=0.73, alpha=2.5')
plt.xlabel('x')
plt.ylabel('M')
plt.grid(True)
plt.legend()
plt.show()
plt.savefig('machplot.png')

